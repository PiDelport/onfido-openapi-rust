/*
 * Onfido API
 *
 * The Onfido API is used to submit check requests.
 *
 * The version of the OpenAPI document: 3.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Check {
    /// The unique identifier for the check. Read-only.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The date and time when this check was created. Read-only.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// The uri of this resource. Read-only.
    #[serde(rename = "href", skip_serializing_if = "Option::is_none")]
    pub href: Option<String>,
    /// The current state of the check in the checking process. Read-only.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// The overall result of the check, based on the results of the constituent reports. Read-only.
    #[serde(rename = "result", skip_serializing_if = "Option::is_none")]
    pub result: Option<String>,
    /// A link to a PDF output of the check results. Append `.pdf` to get the pdf file. Read-only.
    #[serde(rename = "download_uri", skip_serializing_if = "Option::is_none")]
    pub download_uri: Option<String>,
    /// A link to the applicant form, if `applicant_provides_data` is `true`. Read-only.
    #[serde(rename = "form_uri", skip_serializing_if = "Option::is_none")]
    pub form_uri: Option<String>,
    /// For checks where `applicant_provides_data` is `true`, redirect to this URI when the applicant has submitted their data. Read-only.
    #[serde(rename = "redirect_uri", skip_serializing_if = "Option::is_none")]
    pub redirect_uri: Option<String>,
    /// A link to the corresponding results page on the Onfido dashboard.
    #[serde(rename = "results_uri", skip_serializing_if = "Option::is_none")]
    pub results_uri: Option<String>,
    /// An array of report names (strings).
    #[serde(rename = "report_names", skip_serializing_if = "Option::is_none")]
    pub report_names: Option<Vec<String>>,
    /// The ID of the applicant to do the check on.
    #[serde(rename = "applicant_id", skip_serializing_if = "Option::is_none")]
    pub applicant_id: Option<String>,
    /// Indicates whether the privacy notices and terms of service have been read and, where specific laws require, that consent has been given for Onfido.
    #[serde(
        rename = "privacy_notices_read_consent_given",
        skip_serializing_if = "Option::is_none"
    )]
    pub privacy_notices_read_consent_given: Option<bool>,
    /// Array of tags being assigned to this check.
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    /// Send an applicant form to applicant to complete to proceed with check. Defaults to false.
    #[serde(
        rename = "applicant_provides_data",
        skip_serializing_if = "Option::is_none"
    )]
    pub applicant_provides_data: Option<bool>,
    /// For checks where `applicant_provides_data` is `true`, applicant form will not be automatically sent if `suppress_form_emails` is set to `true`. You can manually send the form at any time after the check has been created, using the link found in the form_uri attribute of the check object. Write-only. Defaults to false.
    #[serde(
        rename = "suppress_form_emails",
        skip_serializing_if = "Option::is_none"
    )]
    pub suppress_form_emails: Option<bool>,
    /// Defaults to `true`. Write-only. If set to `false`, you will only receive a response when all reports in your check have completed.
    #[serde(rename = "asynchronous", skip_serializing_if = "Option::is_none")]
    pub asynchronous: Option<bool>,
    /// Optional. An array of strings describing which webhooks to trigger for this check. By default, all webhooks registered in the account will be triggered and this value will be null in the responses.
    #[serde(rename = "webhook_ids", skip_serializing_if = "Option::is_none")]
    pub webhook_ids: Option<Vec<String>>,
    /// An array of report ids.
    #[serde(rename = "report_ids", skip_serializing_if = "Option::is_none")]
    pub report_ids: Option<Vec<String>>,
    /// Optional. An array of document ids, for use with Document reports only. If omitted, the Document report will use the most recently uploaded document by default.
    #[serde(rename = "document_ids", skip_serializing_if = "Option::is_none")]
    pub document_ids: Option<Vec<String>>,
    /// Returns a pre-determined consider sub-result in sandbox for the specific reports in the consider array.
    #[serde(rename = "consider", skip_serializing_if = "Option::is_none")]
    pub consider: Option<Vec<String>>,
    /// Triggers a pre-determined sub-result response for sandbox Document reports.
    #[serde(rename = "sub_result", skip_serializing_if = "Option::is_none")]
    pub sub_result: Option<String>,
}

impl Check {
    pub fn new() -> Check {
        Check {
            id: None,
            created_at: None,
            href: None,
            status: None,
            result: None,
            download_uri: None,
            form_uri: None,
            redirect_uri: None,
            results_uri: None,
            report_names: None,
            applicant_id: None,
            privacy_notices_read_consent_given: None,
            tags: None,
            applicant_provides_data: None,
            suppress_form_emails: None,
            asynchronous: None,
            webhook_ids: None,
            report_ids: None,
            document_ids: None,
            consider: None,
            sub_result: None,
        }
    }
}
