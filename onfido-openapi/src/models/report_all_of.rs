/*
 * Onfido API
 *
 * The Onfido API is used to submit check requests.
 *
 * The version of the OpenAPI document: 3.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ReportAllOf {
    /// The unique identifier for the report. Read-only.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The date and time at which the report was first initiated. Read-only.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// The API endpoint to retrieve the report. Read-only.
    #[serde(rename = "href", skip_serializing_if = "Option::is_none")]
    pub href: Option<String>,
    /// The current state of the report in the checking process. Read-only.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// The result of the report. Read-only.
    #[serde(rename = "result", skip_serializing_if = "Option::is_none")]
    pub result: Option<String>,
    /// The sub_result of the report. It gives a more detailed result for document reports only, and will be null otherwise. Read-only.
    #[serde(rename = "sub_result", skip_serializing_if = "Option::is_none")]
    pub sub_result: Option<String>,
    /// The ID of the check to which the report belongs. Read-only.
    #[serde(rename = "check_id", skip_serializing_if = "Option::is_none")]
    pub check_id: Option<String>,
    /// The name of the report type.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Array of objects with document ids that were used in the Onfido engine. [ONLY USED IN A DOCUMENT CHECK]
    #[serde(rename = "documents", skip_serializing_if = "Option::is_none")]
    pub documents: Option<Vec<crate::models::ReportDocument>>,
    /// The details of the report. This is specific to each type of report.
    #[serde(rename = "breakdown", skip_serializing_if = "Option::is_none")]
    pub breakdown: Option<serde_json::Value>,
    /// The properties associated with the report, if any. Read-only.
    #[serde(rename = "properties", skip_serializing_if = "Option::is_none")]
    pub properties: Option<::std::collections::HashMap<String, serde_json::Value>>,
}

impl ReportAllOf {
    pub fn new() -> ReportAllOf {
        ReportAllOf {
            id: None,
            created_at: None,
            href: None,
            status: None,
            result: None,
            sub_result: None,
            check_id: None,
            name: None,
            documents: None,
            breakdown: None,
            properties: None,
        }
    }
}
